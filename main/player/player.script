local gamedata = require "main/gamedata"

local animation_idle = hash("idle")
local animation_run = hash("run")
local animation_jump = hash("jump")
local animation_jump1 = hash("jump1")
local animation_jump2 = hash("jump2")
local animation_jump3 = hash("jump3")
local animation_fall = hash("fall")
local animation_action = hash("action")

local msg_contact_point_response = hash("contact_point_response")
local msg_trigger_response = hash("trigger_response")
local msg_animation_done = hash("animation_done")
local msg_post_update = hash("post_update")
local msg_lift_moving = hash("lift_moving")
local msg_lift_stopped = hash("lift_stopped")
local msg_player_direction = hash("player_direction")

local group_platform = hash("platform")
local group_wall = hash("wall")
local group_lift = hash("lift")
local group_object = hash("object")
local group_terminal = hash("terminal")

local run_speed = 96
local jump_speed = 110

local gravity = -256
local jump_takeoff_speed = 110

local state_idle = 0
local state_run = 1
local state_jump = 2
local state_search = 3

local direction_right = false
local direction_left = true

local input_left = hash("input_left")
local input_right = hash("input_right")
local input_down = hash("input_down")
local input_up = hash("input_up")
local input_jump = hash("input_jump")
local input_a = hash("input_a")

local reset_pos = nil

local function set_direction(self, direction)
	sprite.set_hflip("#sprite", direction)
	self.direction = direction
end

local function play_animation(self, animation_id)
	if self.current_animation~=animation_id then
		msg.post("#sprite", "play_animation", {id = animation_id})
		self.current_animation = animation_id
	end
end

local function enable_collision(self, collision)
	local coll = "#collision" .. collision
	msg.post("#collisionstand", "disable")
	msg.post("#collisionjump", "disable")
	msg.post("#collisionrun", "disable")
	if collision=="run" then
		msg.post("#collisionstand", "enable")
	end
	msg.post(coll, "enable")
end

local function set_state(self, state)
	if state==state_idle then
		self.speed = vmath.vector3(0, 0, 0)
		play_animation(self, animation_idle)
		enable_collision(self, "stand")
	elseif state==state_run then
		self.speed = vmath.vector3(run_speed, 0, 0)
		play_animation(self, animation_run)
		enable_collision(self, "run")
	elseif state==state_jump then
		self.jump_finished = false
		-- self.jump_timer = 0
		self.speed = vmath.vector3(jump_speed, jump_takeoff_speed, 0)
		play_animation(self, animation_jump1)
		enable_collision(self, "stand")
	elseif state==state_search then
		self.speed = vmath.vector3(0, 0, 0)
		play_animation(self, animation_action)
		enable_collision(self, "stand")
	end
	self.state = state	
end


function init(self)
	msg.post(".", "acquire_input_focus")
	self.speed = vmath.vector3(0, 0, 0)
	self.jump_finished = false
	self.jump_start = 0
	self.current_animation = nil
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	self.wall_contact = false
	self.on_lift = false
	self.lift_moving = false
	self.on_lift_id = nil
	self.on_object = false
	self.on_object_id = nil
	set_state(self, state_idle)
	set_direction(self, direction_right)
	enable_collision(self, "stand")
	
	reset_pos = go.get_position()
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if not gamedata.in_game then
		return
	end

	if not self.lift_moving then
		local pos = go.get_position()
		if dt<0.015 or dt>0.050 then
			dt = 0.033
		end

		if not self.ground_contact and not self.wall_contact then
			if self.state==state_run then 
				self.speed.x = 32
				play_animation(self, animation_fall)
			elseif self.state==state_jump and self.jump_finished then
				self.speed.x = 32
			end
		else
			if self.state==state_jump and (self.jump_finished or current_anim==animation_jump3) then	
				set_state(self, state_idle)
			end
			if self.current_animation==animation_fall then
				set_state(self, state_idle)
			end
		end
			
		
		if self.direction==direction_right then
			pos.x = pos.x + dt*self.speed.x
		else
			pos.x = pos.x - dt*self.speed.x
		end
		self.speed.y = self.speed.y + gravity*dt
		pos.y = pos.y + dt*self.speed.y
		if pos.x > 328 then
			--pos.x = 0
			if gamedata.current_room~=nil then
				msg.post("controller#room", "out_of_scene", {playerpos=go.get_position()})
			else
				msg.post("controller#elevator", "out_of_scene", {playerpos=go.get_position()})
			end
		elseif pos.x < -8 then
			--pos.x = 320
			if gamedata.current_room~=nil then
				msg.post("controller#room", "out_of_scene", {playerpos=go.get_position()})
			else
				msg.post("controller#elevator", "out_of_scene", {playerpos=go.get_position()})
			end
		end

		--pos.x = math.ceil(pos.x)
		if self.ground_contact and (self.state==state_run or self.state==state_idle) then
			pos.y = math.ceil(pos.y)
			local py = math.floor(((pos.y-16)/8)*8)+16
			pos.y = py
		end

		if self.wall_contact then
			pos.x = math.ceil(pos.x)
			local px = math.floor(((pos.x-16)/8)*8)+16
			pos.x = px
		end
		
		go.set_position(pos)

		msg.post("#", msg_post_update)
		--self.correction = vmath.vector3()
		--self.ground_contact = false
	else
		--lift moving...
		if false then
			local lift_pos = go.get_position(self.on_lift_id)
			local pos = go.get_position()
			pos.y = lift_pos.y+16
			go.set_position(pos)
			print("player: " .. go.get_position())
		end
	end
end

local function handle_obstacle_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	local pos = go.get_position()
	pos.y = pos.y + comp.y
	--go.set_position(go.get_position() + comp)
	go.set_position(pos)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
		self.speed.y = 0
	end
	-- project the velocity onto the normal
	--proj = vmath.dot(self.speed, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	--if proj < 0 then
		-- remove that component in that case
	--	self.speed = self.speed - proj * normal
	--end
end

local function handle_wall_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	local pos = go.get_position()
	pos.x = pos.x + comp.x
	go.set_position(pos)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if (normal.x > 0.7 or normal.x < -0.7) and not self.ground_contact then
		self.wall_contact = true
		self.speed.x = 0
	end
	-- project the velocity onto the normal
	--proj = vmath.dot(self.speed, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	--if proj < 0 then
	-- remove that component in that case
	--	self.speed = self.speed - proj * normal
	--end
end


function on_message(self, message_id, message, sender)
	if message_id==msg_animation_done then
		if self.state==state_jump then
			if self.current_animation==animation_jump or self.current_animation==animation_jump3 then
				self.jump_finished = true
				enable_collision(self, "stand")
				--print("jump x = "..(go.get_position().x-self.jump_start))
			elseif self.current_animation==animation_jump1 then
				enable_collision(self, "jump")
				play_animation(self, animation_jump2)
			elseif self.current_animation==animation_jump2 then
				enable_collision(self, "stand")
				play_animation(self, animation_jump3)
			end
		end
	elseif message_id==msg_contact_point_response and not self.lift_moving and gamedata.in_game then
		if message.group == group_platform then
			handle_obstacle_contact(self, message.normal, message.distance)
		elseif message.group == group_wall then
			handle_wall_contact(self, message.normal, message.distance)
		end
	elseif message_id == msg_post_update then
		self.correction = vmath.vector3()
		self.ground_contact = false
		self.wall_contact = false
	elseif message_id == msg_trigger_response and message.group == group_lift then 
		if message.enter then 
			self.on_lift = true
			self.on_lift_id = message.other_id
			print("player on lift")
		else
			self.on_lift = false
			self.on_lift_id = nil
			print("player out of lift")
		end
	elseif message_id==msg_trigger_response and message.group==group_object then
		if message.enter then
			self.on_object = true
			self.on_object_id = message.other_id
		else
			self.on_object = false
			self.on_object_id = nil
		end
	elseif message_id==msg_lift_moving then
		self.lift_moving = true
	elseif message_id==msg_lift_stopped then
		self.lift_moving = false
	elseif message_id==msg_player_direction then
		set_direction(self, message.direction)
	end
	--elseif message_id==msg_lift_position and message.lift_id==self.on_lift_id then
	--	message.position.y = message.position.y + 20
	--	go.set_position(message.position)
	--end
end

function on_input(self, action_id, action)
	if not self.lift_moving and gamedata.in_game then
		if action_id==input_a then
			set_state(self, state_idle)
			go.set_position(reset_pos)
			msg.post("main:/fader#fader", "close")
		elseif self.state~=state_jump and self.ground_contact then
			if action_id==input_left then
				if action.released then
					set_state(self, state_idle)
				else
					if self.state==state_idle then
						local pos = go.get_position()
						if pos.x>=300 then
							pos.x = pos.x - 2
							go.set_position(pos)
						end	
						set_state(self, state_run)
					end
				end
				set_direction(self, direction_left)
			elseif action_id==input_right then
				if action.released then
					set_state(self, state_idle)
				else
					if self.state==state_idle then
						local pos = go.get_position()
						if pos.x<=20 then
							pos.x = pos.x + 2
							go.set_position(pos)
						end	
						set_state(self, state_run)
					end
				end
				set_direction(self, direction_right)
			elseif action_id==input_jump then
				set_state(self, state_jump)
				-- print("jump start x = "..go.get_position().x)
				local pos = go.get_position()
				pos.y = pos.y+1
				go.set_position(pos)
				self.jump_start = go.get_position().x
			elseif action_id==input_up and self.on_lift then
				set_state(self, state_idle)
				self.lift_moving = true
				if gamedata.current_room~=nil then
					msg.post("controller#room", "move_lift", {direction=true, lift_id=self.on_lift_id})
				else
					msg.post("controller#elevator", "move_lift", {direction=true, lift_id=self.on_lift_id})
				end
			elseif action_id==input_up and self.on_object then
				if action.pressed then
					if self.state==state_search or self.state==state_idle or self.state==state_run then
						set_state(self, state_search)
					end
				elseif action.released and self.state==state_search then
					set_state(self, state_idle)
				end
			elseif action_id==input_down and self.on_lift then
				set_state(self, state_idle)
				self.lift_moving = true
				if gamedata.current_room~=nil then
					msg.post("controller#room", "move_lift", {direction=false, lift_id=self.on_lift_id})
				else
					msg.post("controller#elevator", "move_lift", {direction=false, lift_id=self.on_lift_id})
				end
			end
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
