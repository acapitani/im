local gamedata = require "main/gamedata"
local msg_move_lift = hash("move_lift")
local msg_out_of_scene = hash("out_of_scene")

local function open_lift_doors(self)
	local el = gamedata.elevators[gamedata.current_elevator]
	if el.floor[gamedata.current_floor].left~=nil then
		msg.post("liftfront#collisionleft", "disable")
	else
		msg.post("liftfront#collisionleft", "enable")
	end
	if el.floor[gamedata.current_floor].right~=nil then
		msg.post("liftfront#collisionright", "disable")
	else
		msg.post("liftfront#collisionright", "enable")
	end
end

local function move_done(self, url, property)
	self.moving = false
	open_lift_doors(self)
	msg.post("player#player", "lift_stopped")
end

local function move_to_floor(self, next_floor)
	local timing = math.abs(next_floor-gamedata.current_floor)*0.3
	--local pos = go.get_position(go.get_id("elevatormap"))
	local posy = self.startpos.y + (next_floor-1)*128
	gamedata.current_floor = next_floor
	go.animate(go.get_id("elevatormap"), "position.y", go.PLAYBACK_ONCE_FORWARD, posy, go.EASING_LINEAR, timing, 0, move_done)
	--move the top and bottom
	posy = self.topstartpos.y + (next_floor-1)*128
	go.animate(go.get_id("lifttop"), "position.y", go.PLAYBACK_ONCE_FORWARD, posy, go.EASING_LINEAR, timing)
	posy = self.bottomstartpos.y + (next_floor-1)*128
	go.animate(go.get_id("liftbottom"), "position.y", go.PLAYBACK_ONCE_FORWARD, posy, go.EASING_LINEAR, timing)
	
end

local function move_elevator(self, direction)
	--direction == true (up), direction==false (down)
	local current_floor = gamedata.current_floor
	local next_floor = current_floor
	local el = gamedata.elevators[gamedata.current_elevator]

	if direction and current_floor>1 then
		--up
		for i=current_floor-1,1,-1 do
			if el.floor[i].left~=nil or el.floor[i].right~=nil then
				next_floor = i
				break
			end
		end
	elseif not direction and current_floor<12 then
		--down
		for i=current_floor+1,12 do
			if el.floor[i].left~=nil or el.floor[i].right~=nil then
				next_floor = i
				break
			end
		end

	end
	
	if next_floor~=current_floor then
		msg.post("player#player", "lift_moving")
		move_to_floor(self, next_floor)
	else
		msg.post("player#player", "lift_stopped")
	end	
	
end

local function build_elevator(self)
	local el = gamedata.elevators[gamedata.current_elevator]
	local tile_y = (6*8)-1
	local hlayer = hash("layer")
	for i=1,12 do
		if el.floor[i].left==nil then
			-- clean del tunnel sx
			for tx=1,4 do
				local tile = math.random(1,18)
				tilemap.set_tile("elevatormap#elevator", hlayer, tx, tile_y, tile)
				tile = math.random(1,18)
				tilemap.set_tile("elevatormap#elevator", hlayer, tx, tile_y-1, tile)
			end
			tilemap.set_tile("elevatormap#elevator", hlayer, 5, tile_y, 19)
			tilemap.set_tile("elevatormap#elevator", hlayer, 5, tile_y-1, 19)
		end
		if el.floor[i].right==nil then
			-- clean del tunnel dx 
			for tx=7,10 do
				local tile = math.random(1,18)
				tilemap.set_tile("elevatormap#elevator", hlayer, tx, tile_y, tile)
				tile = math.random(1,18)
				tilemap.set_tile("elevatormap#elevator", hlayer, tx, tile_y-1, tile)
			end
			tilemap.set_tile("elevatormap#elevator", hlayer, 6, tile_y, 20)
			tilemap.set_tile("elevatormap#elevator", hlayer, 6, tile_y-1, 20)
		end
		tile_y = tile_y-4
	end

	--calcola la posizione dei top e bottom
	self.topstartpos.y = self.topstartpos.y - ((el.top-1)*256)
	self.bottomstartpos.y = self.bottomstartpos.y + ((6-el.bottom)*256)
	
	--posiziona l'elevator object, i top e bottom a seconda del current_floor
	local deltay = (gamedata.current_floor-1)*128
	local pos = vmath.vector3(self.startpos)
	pos.y = pos.y + deltay
	go.set_position(pos, go.get_id("elevatormap"))

	pos = vmath.vector3(self.topstartpos)
	pos.y = pos.y + deltay
	go.set_position(pos, go.get_id("lifttop"))

	pos = vmath.vector3(self.bottomstartpos)
	pos.y = pos.y + deltay
	go.set_position(pos, go.get_id("liftbottom"))

	--setta la posizione di ingresso del player
	local playerpos = go.get_position(go.get_id("player"))
	if gamedata.player_tunnel==0 then
		--left 
		playerpos.x = 16
		msg.post("player#player", "player_direction", {direction=false})
	elseif gamedata.player_tunnel==1 then
		--center 
		playerpos.x = 160
		msg.post("player#player", "player_direction", {direction=true})
	else
		--right
		playerpos.x = 304
		msg.post("player#player", "player_direction", {direction=true})
	end
	go.set_position(playerpos, go.get_id("player"))
end

local function initialize_map(self)
	if gamedata.map==nil then
		gamedata.map = {}
		--clona la mappa e resetta quella locale
		local x, y, w, h = tilemap.get_bounds("map#map")
		local hlayer = hash("layer")
		local empty_tile = tilemap.get_tile("map#map", hlayer, 1, 1)
		for y=1,h do
			gamedata.map[y] = {}
			for x=1,w do
				local tile = tilemap.get_tile("map#map", hlayer, x, y)
				gamedata.map[y][x] = tile
				tilemap.set_tile("map#map", hlayer, x, y, empty_tile)
			end
		end
		-- index room locations and set doors
		local room_map = {}
		local room_index = 1
		for x=1,w do
			local elevator_floor = 1
			for y=h,1,-1 do
				if room_map[y]==nil then
					room_map[y] = {}
				end
				local tile = gamedata.map[y][x]
				if tile==11 then
					room_map[y][x] = room_index
					-- setta le porte della room (sx e dx)
					local tile_sx = gamedata.map[y][x-1]
					local tile_dx = gamedata.map[y][x+1]
					local elevator_sx = (x-2)/2
					local elevator_dx = x/2
					if tile_sx==3 or tile_sx==6 or tile_sx==9 then
						gamedata.rooms[room_index].door_left = {pos = 1, elevator = elevator_sx, floor = elevator_floor}
					elseif tile_sx==5 or tile_sx==7 or tile_sx==8 then
						gamedata.rooms[room_index].door_left = {pos = 2, elevator = elevator_sx, floor = elevator_floor+1}
					end
					if tile_dx==2 or tile_dx==6 or tile_dx==8 then
						gamedata.rooms[room_index].door_right = {pos = 1, elevator = elevator_dx, floor = elevator_floor}
					elseif tile_dx==4 or tile_dx==7 or tile_dx==9 then
						gamedata.rooms[room_index].door_right = {pos = 2, elevator = elevator_dx, floor = elevator_floor+1}
					end
					room_index = room_index + 1
				end
				elevator_floor = elevator_floor + 2
			end
		end
		-- costruisce gli elevator 
		local px = 3
		for i=1,8 do
			local bottom = 1
			local top = 6
			local floor_index = 1
			local bottom = 0
			local top = 0
			gamedata.elevators[i].floor = {}
			for y=6,1,-1 do
				local tile_sx = gamedata.map[y][px-1]
				local tile_dx = gamedata.map[y][px+1]
				local tile = gamedata.map[y][px]
				gamedata.elevators[i].floor[floor_index] = {left = nil}
				gamedata.elevators[i].floor[floor_index+1] = {left = nil}
				if tile_sx==11 then
					if tile==2 or tile==6 or tile==8 then
						gamedata.elevators[i].floor[floor_index].left = room_map[y][px-1]
					end
					if tile==4 or tile==7 or tile==9 then
						gamedata.elevators[i].floor[floor_index+1].left = room_map[y][px-1]
					end
				end
				gamedata.elevators[i].floor[floor_index].right = nil
				gamedata.elevators[i].floor[floor_index+1].right = nil 
				if tile_dx==11 then
					if tile==3 or tile==6 or tile==9 then
						gamedata.elevators[i].floor[floor_index].right = room_map[y][px+1]
					end
					if tile==5 or tile==7 or tile==8 then
						gamedata.elevators[i].floor[floor_index+1].right = room_map[y][px+1]
					end
				end
				if top==0 and tile~=1 then
					top = (6-y)+1
				end
				if tile~=1 then
					bottom = (6-y)+1
				end
				floor_index = floor_index + 2
			end
			gamedata.elevators[i].top = top 
			gamedata.elevators[i].bottom = bottom
			px = px+2
		end
	end
end

function init(self)
	self.startpos = go.get_position(go.get_id("elevatormap"))
	self.topstartpos = go.get_position(go.get_id("lifttop"))
	self.bottomstartpos = go.get_position(go.get_id("liftbottom"))
	initialize_map(self)
	build_elevator(self)
	open_lift_doors(self)
	msg.post("main:/fader#fader", "open")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id==msg_move_lift and message.lift_id ~= nil then
		move_elevator(self, message.direction)
	elseif message_id==msg_out_of_scene then
		local el = gamedata.elevators[gamedata.current_elevator]
		local room_id = nil
		local door_pos = 1
		local door_dir = true	--right
		if message.playerpos.x<=0 then
			--player exit left tunnel
			room_id = el.floor[gamedata.current_floor].left
		else
			--player exit right tunnel
			room_id = el.floor[gamedata.current_floor].right
			door_dir = false	--left
		end
		if room_id~=nil then
			if (gamedata.current_floor%2)==0 then
				door_pos = 2
			end
			gamedata.set_room_scene(room_id, door_pos, door_dir)
			next_scene = "loader#room"
			msg.post("main:/fader#fader", "close")
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
